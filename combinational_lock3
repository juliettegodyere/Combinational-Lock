----------------------------------------------------------------------------------
-- Generic top level design file
----------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_SIGNED.ALL;

entity top_level is
    Port ( 
         CLK100MHZ: in std_logic;
	      BTNL, BTNR, BTNU, BTND, BTNC: in std_logic;        --Push buttons
	      SWITCHES:  in STD_LOGIC_VECTOR (15 downto 0);       --Slider switches
          LEDS:      out STD_LOGIC_VECTOR (7 downto 0);      --LEDs
		   DIGITS:    out STD_LOGIC_VECTOR (7 downto 0);      --Digits of 7-segment display
         SEGMENTS:  out STD_LOGIC_VECTOR (7 downto 0)   );  --Segments of 7-segment display 
end top_level;

architecture Behavioral of top_level is
    --Local declarations go here
    signal passcode: std_logic_vector (15 downto 0):=X"0240"; 
    signal passcode_input: std_logic_vector (15 downto 0):=X"2222"; 
    signal new_passcode: std_logic_vector (15 downto 0):=X"2222";
    signal b_date: std_logic_vector(15 downto 0):=X"1967";
    signal b_date_input: std_logic_vector(15 downto 0):=X"2222";
    signal number: std_logic_vector (3 downto 0);
    signal enable: std_logic;
    signal count: std_logic_vector(15 downto 0):=(OTHERS=>'0') ; 
    signal dig_count: Integer:=0; -- Used as multiplexer for diplaying of multiple displays
    constant MAX_COUNT: std_logic_vector(15 downto 0) := "1100001101010000";  -- 100,000: use this for synthesis  --  "1010";  
    type my_states IS (id, get_bd, get_code, ready,start, s0, s1, s2, s3); -- id: idle, st:start, s0: input 1, s1: input 2, s2: input 3, s3: input 4, re: reset
    signal state: my_states:=id; 
    signal start_btnc_prev, accept_btnl_prev, change_passcode_btnu_prev, debounced_btnc, debounced_btnl, debounced_btnu: std_logic :='0';

    begin

    --Local signal declarations go here
    state <= b_date = b_date_input ? get_code : get_bd;
    state <= p_code = p_code_input ? ready : get_code;

    --Processing goes here
    process(enable)
        begin
            start_btnc_prev = BTNC;
            accept_btnl_prev = BTNL;
            change_passcode_btnu_prev = BTNU;

            if rising_edge(enable) then
                if BTNC = '1' and start_btnc_prev = '0' then
                    case state is
                        when id =>
                            if debounced_btnc = '1' then
                                state <= start;
                            else
                                state <= id;
                            end if;
                        when others =>
                            state <= id;
                    end case;
                elsif BTNU = '1' and change_passcode_btnu_prev = '0' then
                    case state is
                        when id => 
                            if debounced_btnu = '1' then
                                state <= get_bd;
                            else
                                state <= id;
                            end if;
                        when others => state <= id;
                    end case;
                elsif BTNL = '1' and start_btnl_prev = '0' then
                    case state is
                        when get_bd => 
                            if debounced_btnd = '1' then
                                state <= get_code;
                            else
                                state <= get_bd;
                            end if;
                        when get_code => 
                            if debounced_btnd = '1' then
                                state <= ready;
                            else
                                state <= get_code;
                            end if;
                        when ready =>
                            if debounced_btnd = '1' then
                                state <= start;
                            else
                                state <= ready;
                            end if;
                        when start =>
                            if debounced_btnd = '1' then
                                state <= s0;
                            else
                                state <= start;
                            end if;
                        when s0 =>
                            if debounced_btnd = '1' then
                                state <= s1;
                            else
                                state <= s0;
                            end if;
                        when s1 =>
                            if debounced_btnd = '1' then
                                state <= s2;
                            else
                                state <= s1;
                            end if;
                        when s2 =>
                            if debounced_btnd = '1' then
                                state <= s3;
                            else
                                state <= s2;
                            end if;
                        when s3 =>
                            if debounced_btnd = '1' then
                                state <= start;
                            else
                                state <= s3;
                            end if;
                        when others => state <= id;
                    end case;
                else
                    state <= id;
                end if;
            end if;
    end process;

    process(CLK100MHZ)
        begin
            if rising_edge(CLK100MHZ) then
               if state = id then
                    count <= count + 1;
                    if count = MAX_COUNT then
                        count <= OTHERS => '0';
                        enable <= '1';
                        LEDS <= "00000000"; -- Turn off unused LEDs
                        DIGITS <= "11111111"; -- Turn off all display digits
                    else
                        enable <= '0';
                    end if;
                elsif state = get_bd then
                    count <= count + 1;
                    if count = MAX_COUNT then
                        count <= OTHERS => '0';
                        enable <= '1';
                      
                        LEDS(7 downto 0) <= "00000001"; -- Turn on a single led to indicate that the system is ready
                        b_date_input(3 DOWNTO 0) <= SWITCHES(3 DOWNTO 0); --Get the first user input from the first 4 right most switches
                        b_date_input(7 DOWNTO 4) <= SWITCHES(7 DOWNTO 4); --Get the first user input from the first 4 right most switches
                        b_date_input(11 DOWNTO 5) <= SWITCHES(11 DOWNTO 5); --Get the first user input from the first 4 right most switches
                        b_date_input(15 DOWNTO 12) <= SWITCHES(15 DOWNTO 12); --Get the first user input from the first 4 right most switches
                        --The following condition block enables me display two values concurrently on the segment display
                        if dig_count = 0 then
                           number <= "1010";
                           DIGITS <= "11111110"; --Displays "N" on the first digit
                        elsif dig_count = 1 then
                           number <= "0000";
                           DIGITS <= "11111101"; -- Displays "0" on the second digit
                        end if;
      
                        --Manages count
                        if dig_count > 1 then
                           dig_count <= 0;
                        else 
                           dig_count <= dig_count+1;
                        end if;
                    else
                        enable <= '0';
                    end if;
                elsif state = get_code then
                    count <= count + 1;
                    if count = MAX_COUNT then
                        count <= OTHERS => '0';
                        enable <= '1';
                        if b_date_input = b_date then
                            new_passcode(3 DOWNTO 0) <= SWITCHES(3 DOWNTO 0); --Get the first user input from the first 4 right most switches
                            new_passcode(7 DOWNTO 4) <= SWITCHES(7 DOWNTO 4); --Get the first user input from the first 4 right most switches
                            new_passcode(11 DOWNTO 5) <= SWITCHES(11 DOWNTO 5); --Get the first user input from the first 4 right most switches
                            new_passcode(15 DOWNTO 12) <= SWITCHES(15 DOWNTO 12); --Get the first user input from the first 4 right most switches
                            LEDS(7 downto 0) <= "11111111";
                            if dig_count = 0 then
                                number <= "1011";
                                DIGITS <= "11111110"; --Displays "H" on the third digit
                            elsif dig_count = 1 then
                                number <= "0000";
                                DIGITS <= "11111101"; --Displays "O" on the third digit
                            end if;
                            if dig_count > 1 then
                                dig_count <= 0;
                             else 
                                dig_count <= dig_count+1;
                             end if;
                        else
                            LEDS(7 downto 0) <= "00000001"; -- Turn on a single led to indicate that the system is ready
                            state <= get_bd;
                            if dig_count = 0 then
                                number <= "1100";
                                DIGITS <= "11111110";--Displays "r" on the third digit
                            elsif dig_count = 1 then
                                number <= "1100";
                                DIGITS <= "11111101";--Displays "r" on the third digit
                            elsif dig_count = 2 then
                                number <= "1110";
                                DIGITS <= "11111011";--Displays "E" on the third digit
                            end if;
                            if dig_count > 2 then
                                dig_count <= 0;
                             else 
                                dig_count <= dig_count+1;
                             end if;
                        end if;
                    else
                        enable <= '0';
                    end if;
                elsif state = ready then
                    count <= count + 1;
                    if count = MAX_COUNT then
                        count <= OTHERS => '0';
                        enable <= '1';
                        if new_passcode = passcode or new_passcode = "0000" then
                            state <= get_code;
                            LEDS(7 downto 0) <= "11111111";
                             if dig_count = 0 then
                                number <= "1100";
                                DIGITS <= "11111110";--Displays "r" on the third digit
                            elsif dig_count = 1 then
                                number <= "1100";
                                DIGITS <= "11111101";--Displays "r" on the third digit
                            elsif dig_count = 2 then
                                number <= "1110";
                                DIGITS <= "11111011";--Displays "E" on the third digit
                            end if;
                            if dig_count > 2 then
                                dig_count <= 0;
                             else 
                                dig_count <= dig_count+1;
                             end if;
                        else
                            if dig_count = 0 then
                                number <= "1011";
                                DIGITS <= "11111110"; --Displays "H" on the third digit
                            elsif dig_count = 1 then
                                number <= "0000";
                                DIGITS <= "11111101"; --Displays "O" on the third digit
                            end if;
                            if dig_count > 1 then
                                dig_count <= 0;
                            else 
                                dig_count <= dig_count+1;
                            end if;
                            state <= start;
                        end if;
                    else
                        enable <= '0';
                    end if;
                elsif state = st then
                    if count = MAX_COUNT THEN  -- Count to MAX_COUNT 
                        enable <= '1' ; 
                        count <= (others => '0') ;
                        LEDS(7 downto 0) <= "00000001"; -- Turn on a single led to indicate that the system is ready
                        result(3 DOWNTO 0) <= SWITCHES(3 DOWNTO 0); --Get the first user input from the first 4 right most switches
                        --The following condition block enables me display two values concurrently on the segment display
                        if dig_count = 0 then
                            number <= "1010";
                            DIGITS <= "11111110"; --Displays "N" on the first digit
                        elsif dig_count = 1 then
                            number <= "0000";
                            DIGITS <= "11111101"; -- Displays "0" on the second digit
                        end if;
        
                        --Manages count
                        if dig_count > 1 then
                            dig_count <= 0;
                        else 
                            dig_count <= dig_count+1;
                        end if;
                    else  
                        enable <= '0' ; 
                    end if ;
                    count <= count + 1 ;  
                elsif state = s0 then
                    if count = MAX_COUNT then  -- Count to MAX_COUNT 
                        enable <= '1' ; 
                        count <= (others => '0') ;
                        number <= "1111"; 
                        DIGITS <= "11111110";  --Displays "-" on the first digit. 
                        result(7 DOWNTO 4) <= SWITCHES(7 DOWNTO 4); --Get the second user input from the first 4 right most switches
                    else  
                        enable <= '0' ; 
                    end if ;
                    count <= count + 1 ;  
                elsif state = s1 then
                    if count = MAX_COUNT then  -- Count to MAX_COUNT 
                        enable <= '1' ; 
                        count <= (others => '0') ;
                        number <= "1111"; 
                        DIGITS <= "11111101";  --Displays "-" on the second digit
                        result(11 DOWNTO 8) <= SWITCHES(11 DOWNTO 8); 
                    else  
                        enable <= '0' ; 
                    end if ;
                        count <= count + 1 ;    
                    elsif state = s2 then
                    if count = MAX_COUNT then  -- Count to MAX_COUNT 
                        enable <= '1' ; 
                        count <= (others => '0') ;
                        number <= "1111"; 
                        DIGITS <= "11111011"; --Displays "-" on the third digit
                        result(15 DOWNTO 12) <= SWITCHES(15 DOWNTO 12);
                    else  
                        enable <= '0' ; 
                    end if ;
                    count <= count + 1 ;  
                elsif state = s3 then
                    if count = MAX_COUNT then  -- Count to MAX_COUNT 
                        enable <= '1' ; 
                        count <= (others => '0') ; 
                        if new = result then
                            LEDS(7 downto 0) <= "11111111";
                            DIGITS <= "11111110"; 
                                if dig_count = 0 then
                                number <= "1011";
                                DIGITS <= "11111110"; --Displays "H" on the third digit
                                elsif dig_count = 1 then
                                number <= "0000";
                                DIGITS <= "11111101"; --Displays "O" on the third digit
                                end if;
                                if dig_count > 1 then
                                dig_count <= 0;
                                else 
                                dig_count <= dig_count+1;
                                end if;
                        else
                            LEDS(7 downto 0) <= "00000000";
                            if dig_count = 0 then
                                number <= "1100";
                                DIGITS <= "11111110";--Displays "r" on the third digit
                            elsif dig_count = 1 then
                                number <= "1100";
                                DIGITS <= "11111101";--Displays "r" on the third digit
                            elsif dig_count = 2 then
                                number <= "1110";
                                DIGITS <= "11111011";--Displays "E" on the third digit
                            end if;
                            if dig_count > 2 then
                                dig_count <= 0;
                            else 
                                dig_count <= dig_count+1;
                            end if;
                        end if ;
                    else  
                        enable <= '0' ; 
                    end if ;
                    count <= count + 1 ;   
                else
                    count <= OTHERS => '0';
                    enable <= '0';
                end if;
            end if;
    end process;
 -- Send the result onto the LEDs so that we can see them
 --LEDS(7 downto 0) <= result;
start_btn_debouncer: ENTITY work.Debouncer(Behavioral) PORT MAP(clk=>enable, btn=>start_btn_prev, btnc_clr=>debounced_btnc);
accept_btn_debouncer: ENTITY work.Debounce(Behavioral) PORT MAP(clk=>enable, btn=>accept_btn_prev, btnu_clr=>debounced_btnu);
change_passcode_btn_debouncer: ENTITY work.Debounce(Behavioral) PORT MAP(clk=>enable, btn=>change_passcode_btn_prev, btnl_clr=>debounced_btnl);

display: ENTITY work.display(Behavioral) PORT MAP(number=> number, segs=> SEGMENTS);

 -- We're not using these signals, but we have to give some value to
 -- all declared outputs so that the code will compile
--LEDS(7 downto 0) <= "00000000"; -- Turn off unused LEDs
--DIGITS <= "11111111"; -- Turn off digit of display
--SEGMENTS <= "11111111";
  

end Behavioral;	
